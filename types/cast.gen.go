// Code generated by types/cast.gen.go.tmpl. DO NOT EDIT.

// Copyright 2019 Nick Poorman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package types

import (
	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/decimal128"
	"github.com/apache/arrow/go/arrow/float16"
)

func CastToInt64(v interface{}) (int64, bool) {
	switch t := v.(type) {
	case int64:
		return t, true
	default:
		return 0, false
	}
}

func CastToUint64(v interface{}) (uint64, bool) {
	switch t := v.(type) {
	case uint64:
		return t, true
	default:
		return 0, false
	}
}

func CastToInt32(v interface{}) (int32, bool) {
	switch t := v.(type) {
	case int32:
		return t, true
	default:
		return 0, false
	}
}

func CastToUint32(v interface{}) (uint32, bool) {
	switch t := v.(type) {
	case uint32:
		return t, true
	default:
		return 0, false
	}
}

func CastToFloat64(v interface{}) (float64, bool) {
	switch t := v.(type) {
	case float64:
		return t, true
	default:
		return 0, false
	}
}

func CastToFloat32(v interface{}) (float32, bool) {
	switch t := v.(type) {
	case float32:
		return t, true
	default:
		return 0, false
	}
}

func CastToInt16(v interface{}) (int16, bool) {
	switch t := v.(type) {
	case int16:
		return t, true
	default:
		return 0, false
	}
}

func CastToUint16(v interface{}) (uint16, bool) {
	switch t := v.(type) {
	case uint16:
		return t, true
	default:
		return 0, false
	}
}

func CastToInt8(v interface{}) (int8, bool) {
	switch t := v.(type) {
	case int8:
		return t, true
	default:
		return 0, false
	}
}

func CastToUint8(v interface{}) (uint8, bool) {
	switch t := v.(type) {
	case uint8:
		return t, true
	default:
		return 0, false
	}
}

func CastToTimestamp(v interface{}) (arrow.Timestamp, bool) {
	switch t := v.(type) {
	case arrow.Timestamp:
		return t, true
	case int64:
		return arrow.Timestamp(t), true
	default:
		return 0, false
	}
}

func CastToTime32(v interface{}) (arrow.Time32, bool) {
	switch t := v.(type) {
	case arrow.Time32:
		return t, true
	case int32:
		return arrow.Time32(t), true
	default:
		return 0, false
	}
}

func CastToTime64(v interface{}) (arrow.Time64, bool) {
	switch t := v.(type) {
	case arrow.Time64:
		return t, true
	case int64:
		return arrow.Time64(t), true
	default:
		return 0, false
	}
}

func CastToDate32(v interface{}) (arrow.Date32, bool) {
	switch t := v.(type) {
	case arrow.Date32:
		return t, true
	case int32:
		return arrow.Date32(t), true
	default:
		return 0, false
	}
}

func CastToDate64(v interface{}) (arrow.Date64, bool) {
	switch t := v.(type) {
	case arrow.Date64:
		return t, true
	case int64:
		return arrow.Date64(t), true
	default:
		return 0, false
	}
}

func CastToDuration(v interface{}) (arrow.Duration, bool) {
	switch t := v.(type) {
	case arrow.Duration:
		return t, true
	case int64:
		return arrow.Duration(t), true
	default:
		return 0, false
	}
}

func CastToMonthInterval(v interface{}) (arrow.MonthInterval, bool) {
	switch t := v.(type) {
	case arrow.MonthInterval:
		return t, true
	case int32:
		return arrow.MonthInterval(t), true
	default:
		return 0, false
	}
}

func CastToFloat16(v interface{}) (float16.Num, bool) {
	switch t := v.(type) {
	case float16.Num:
		return t, true
	case float32:
		return float16.New(t), true
	default:
		return float16.New(0), false
	}
}

func CastToDecimal128(v interface{}) (decimal128.Num, bool) {
	switch t := v.(type) {
	case decimal128.Num:
		return t, true
	case uint64:
		return decimal128.FromU64(t), true
	case int64:
		return decimal128.FromI64(t), true
	case Signed128BitInteger:
		return decimal128.New(t.Hi, t.Lo), true
	default:
		return decimal128.New(0, 0), false
	}
}

func CastToDayTimeInterval(v interface{}) (arrow.DayTimeInterval, bool) {
	switch t := v.(type) {
	case arrow.DayTimeInterval:
		return t, true
	default:
		return arrow.DayTimeInterval{Days: 0, Milliseconds: 0}, false
	}
}

func CastToBoolean(v interface{}) (bool, bool) {
	switch t := v.(type) {
	case bool:
		return t, true
	case int64:
		return t != 0, true
	case uint64:
		return t != 0, true
	case int32:
		return t != 0, true
	case uint32:
		return t != 0, true
	case float64:
		return t != 0.0, true
	case float32:
		return t != 0.0, true
	case int16:
		return t != 0, true
	case uint16:
		return t != 0, true
	case int8:
		return t != 0, true
	case uint8:
		return t != 0, true
	case arrow.Timestamp:
		return t != 0, true
	case arrow.Time32:
		return t != 0, true
	case arrow.Time64:
		return t != 0, true
	case arrow.Date32:
		return t != 0, true
	case arrow.Date64:
		return t != 0, true
	case arrow.Duration:
		return t != 0, true
	case arrow.MonthInterval:
		return t != 0, true
	case float16.Num:
		return t.Float32() != 0.0, true
	case decimal128.Num:
		return t.Sign() != 0, true
	case arrow.DayTimeInterval:
		return t.Days != 0 || t.Milliseconds != 0, true
	case string:
		return t != "", true
	case nil:
		return false, true
	default:
		return false, false
	}
}

func CastToString(v interface{}) (string, bool) {
	switch t := v.(type) {
	case string:
		return t, true
	default:
		return "", false
	}
}
