// Copyright 2019 Nick Poorman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dataframe

import (
	"fmt"
	"os"
	"reflect"

	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
	"github.com/apache/arrow/go/arrow/decimal128"
	"github.com/apache/arrow/go/arrow/float16"
	"github.com/go-bullseye/bullseye/types"
	"github.com/pkg/errors"
)

// TODO(nickpoorman): Add the rest of the data types.
// TODO(nickpoorman): Add null, etc. to types.tmpldata.
func (sb *SmartBuilder) initFieldAppender(field *arrow.Field) AppenderFunc {
	switch field.Type.(type) {
    {{range $root := .In}}
    case *arrow.{{.Name}}Type:
		return func(field array.Builder, v interface{}) {
			builder := field.(*array.{{.Name}}Builder)
			if v == nil {
				builder.AppendNull()
			} else {
                vT, ok := types.CastTo{{.Name}}(v);
                if !ok {
                    panic(fmt.Sprintf("cannot cast %T to {{or .QualifiedType .Type}}", v))
                }
				builder.Append(vT)
			}
		}
    {{end}}

	case *arrow.ListType:
		return func(b array.Builder, v interface{}) {
			builder := b.(*array.ListBuilder)
			if v == nil {
				builder.AppendNull()
			} else {
				sub := builder.ValueBuilder()
				fmt.Printf("list type value: %v\n", v)
				v := reflectValueOfNonPointer(v).Elem()
				sub.Reserve(v.Len())
				builder.Append(true)
				for i := 0; i < v.Len(); i++ {
					sb.appendValue(sub, v.Index(i).Interface())
				}
			}
		}

	case *arrow.FixedSizeListType:
		return func(b array.Builder, v interface{}) {
			builder := b.(*array.FixedSizeListBuilder)
			if v == nil {
				builder.AppendNull()
			} else {
				sub := builder.ValueBuilder()
				v := reflect.ValueOf(v).Elem()
				sub.Reserve(v.Len())
				builder.Append(true)
				for i := 0; i < v.Len(); i++ {
					sb.appendValue(sub, v.Index(i).Interface())
				}
			}
		}

	case *arrow.StructType:
		return func(b array.Builder, v interface{}) {
			builder := b.(*array.StructBuilder)
			if v == nil {
				builder.AppendNull()
			} else {
				builder.Append(true)
				v := reflect.ValueOf(v).Elem()
				for i := 0; i < builder.NumField(); i++ {
					f := builder.FieldBuilder(i)
					sb.appendValue(f, v.Field(i).Interface())
				}
			}
		}

	default:
		panic(fmt.Errorf("dataframe/smartbuilder: unhandled field type %T", field.Type))
	}
}

// TODO(nickpoorman): Write test that will test all the data types.
// TODO(nickpoorman): Add the rest of the data types.
func (sb *SmartBuilder) appendValue(bldr array.Builder, v interface{}) {
	fmt.Printf("appendValue: |%v| - %T\n", v, bldr)
	switch b := bldr.(type) {
	case *array.BooleanBuilder:
		b.Append(v.(bool))
	case *array.Int8Builder:
		b.Append(v.(int8))
	case *array.Int16Builder:
		b.Append(v.(int16))
	case *array.Int32Builder:
		b.Append(v.(int32))
	case *array.Int64Builder:
		b.Append(v.(int64))
	case *array.Uint8Builder:
		b.Append(v.(uint8))
	case *array.Uint16Builder:
		b.Append(v.(uint16))
	case *array.Uint32Builder:
		b.Append(v.(uint32))
	case *array.Uint64Builder:
		b.Append(v.(uint64))
	case *array.Float32Builder:
		b.Append(v.(float32))
	case *array.Float64Builder:
		b.Append(v.(float64))
	case *array.StringBuilder:
		b.Append(v.(string))
	case *array.Date32Builder:
		b.Append(arrow.Date32(v.(int32)))

	case *array.ListBuilder:
		b.Append(true)
		sub := b.ValueBuilder()
		v := reflect.ValueOf(v)
		for i := 0; i < v.Len(); i++ {
			sb.appendValue(sub, v.Index(i).Interface())
		}

	case *array.FixedSizeListBuilder:
		b.Append(true)
		sub := b.ValueBuilder()
		v := reflect.ValueOf(v)
		for i := 0; i < v.Len(); i++ {
			sb.appendValue(sub, v.Index(i).Interface())
		}

	case *array.StructBuilder:
		b.Append(true)
		v := reflect.ValueOf(v)
		for i := 0; i < b.NumField(); i++ {
			f := b.FieldBuilder(i)
			sb.appendValue(f, v.Field(i).Interface())
		}

	default:
		panic(errors.Errorf("dataframe/smartbuilder: unhandled Arrow builder type %T", b))
	}
}
